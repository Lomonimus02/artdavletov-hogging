#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/generate-admin-hash.js [–ø–∞—Ä–æ–ª—å]
 */

const bcrypt = require('bcryptjs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function hashPassword(password) {
  const saltRounds = 12;
  return await bcrypt.hash(password, saltRounds);
}

async function generateHash() {
  try {
    let password = process.argv[2];
    
    if (!password) {
      // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
      password = await new Promise((resolve) => {
        rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ', (answer) => {
          resolve(answer);
        });
      });
    }
    
    if (!password || password.trim().length === 0) {
      console.error('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
      process.exit(1);
    }
    
    if (password.length < 6) {
      console.error('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!');
      process.exit(1);
    }
    
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è...');
    const hash = await hashPassword(password);
    
    console.log('\n‚úÖ –•–µ—à –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
    console.log('\nüìã –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∞—à .env.local —Ñ–∞–π–ª:');
    console.log('‚îÄ'.repeat(60));
    console.log(`ADMIN_USERNAME=admin`);
    console.log(`ADMIN_PASSWORD_HASH=${hash}`);
    console.log('‚îÄ'.repeat(60));
    
    console.log('\nüîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:');
    console.log('‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Ö–µ—à–µ–º');
    console.log('‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ .env.local –≤ .gitignore');
    console.log('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏');
    console.log('‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bcryptjs —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
try {
  require('bcryptjs');
} catch (error) {
  console.error('‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ bcryptjs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
  console.error('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: npm install bcryptjs');
  process.exit(1);
}

generateHash();
