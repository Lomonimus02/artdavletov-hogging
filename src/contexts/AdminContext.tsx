'use client';

import React, { createContext, useContext, useState, useEffect } from 'react';

interface AdminContextType {
  isAdmin: boolean;
  login: (username: string, password: string) => Promise<boolean>;
  logout: () => void;
  checkAdminStatus: () => void;
}

const AdminContext = createContext<AdminContextType | undefined>(undefined);

// –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

export const AdminProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAdmin, setIsAdmin] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setIsAdmin(false);

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (typeof window !== 'undefined') {
      sessionStorage.removeItem('admin_session');
      sessionStorage.removeItem('admin_session_time');
    }
  }, []);

  const checkAdminStatus = () => {
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false - —Ç—Ä–µ–±—É–µ–º –Ω–æ–≤—ã–π –≤—Ö–æ–¥ –∫–∞–∂–¥—ã–π —Ä–∞–∑
    setIsAdmin(false);
  };

  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ª–æ–≥–∏–Ω–æ–º:', username);

      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:', data);
        setIsAdmin(true);
        // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é - —Ç—Ä–µ–±—É–µ–º –≤—Ö–æ–¥ –∫–∞–∂–¥—ã–π —Ä–∞–∑
        return true;
      } else {
        const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', errorData);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      return false;
    }
  };

  const logout = () => {
    setIsAdmin(false);
    // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    if (typeof window !== 'undefined') {
      sessionStorage.clear();
    }
  };

  return (
    <AdminContext.Provider value={{ isAdmin, login, logout, checkAdminStatus }}>
      {children}
    </AdminContext.Provider>
  );
};

export const useAdmin = () => {
  const context = useContext(AdminContext);
  if (context === undefined) {
    throw new Error('useAdmin must be used within an AdminProvider');
  }
  return context;
};
