/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

const bcrypt = require('bcryptjs');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const testPassword = 'plpl(940180(yhnhaa13';
  const testHash = '$2b$12$xbhTgxtcPMRlgXKjYNKgH.zIascWn3R71Nk.We0AHtubfrRFJBoYi';
  const wrongPassword = 'wrongpassword';
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    console.log('‚úÖ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è');
    const validResult = await bcrypt.compare(testPassword, testHash);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${validResult ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`   –ü–∞—Ä–æ–ª—å "${testPassword}" ${validResult ? '—Å–æ–≤–ø–∞–¥–∞–µ—Ç' : '–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'} —Å —Ö–µ—à–µ–º\n`);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    console.log('‚úÖ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è');
    const invalidResult = await bcrypt.compare(wrongPassword, testHash);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${!invalidResult ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`   –ü–∞—Ä–æ–ª—å "${wrongPassword}" ${!invalidResult ? '–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω' : '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–Ω—è—Ç'}\n`);
    
    // –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞
    console.log('‚úÖ –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞');
    const newHash = await bcrypt.hash('testpassword123', 12);
    console.log(`   –ù–æ–≤—ã–π —Ö–µ—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${newHash.substring(0, 20)}...\n`);
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞
    console.log('‚úÖ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞');
    const newHashResult = await bcrypt.compare('testpassword123', newHash);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${newHashResult ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
    console.log(`   –ù–æ–≤—ã–π —Ö–µ—à ${newHashResult ? '—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}\n`);
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const allTestsPassed = validResult && !invalidResult && newHashResult;
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(`   ${allTestsPassed ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}`);
    
    if (allTestsPassed) {
      console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('üîí –ü–∞—Ä–æ–ª–∏ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt');
      console.log('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAuthentication();
