// –¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã (—ç–º—É–ª–∏—Ä—É–µ–º ES –º–æ–¥—É–ª–∏ –≤ CommonJS)
const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —É—Ç–∏–ª–∏—Ç
const authUtilsPath = path.join(__dirname, 'src', 'utils', 'auth.ts');
if (fs.existsSync(authUtilsPath)) {
  console.log('‚úÖ –§–∞–π–ª auth.ts –Ω–∞–π–¥–µ–Ω');
} else {
  console.log('‚ùå –§–∞–π–ª auth.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –¢–µ—Å—Ç bcrypt
const bcrypt = require('bcryptjs');

async function testBcrypt() {
  try {
    const testPassword = 'plpl(940180(yhnhaa13';
    const expectedHash = '$2b$12$xbhTgxtcPMRlgXKjYNKgH.zIascWn3R71Nk.We0AHtubfrRFJBoYi';
    
    console.log('\nüß™ –¢–µ—Å—Ç bcrypt:');
    console.log('–ü–∞—Ä–æ–ª—å:', testPassword);
    console.log('–û–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à:', expectedHash.substring(0, 20) + '...');
    
    const result = await bcrypt.compare(testPassword, expectedHash);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', result ? '‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' : '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢');
    
    // –¢–µ—Å—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (process.env.ADMIN_PASSWORD_HASH) {
      const envResult = await bcrypt.compare(testPassword, process.env.ADMIN_PASSWORD_HASH);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è:', envResult ? '‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' : '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ bcrypt:', error.message);
  }
}

testBcrypt();
